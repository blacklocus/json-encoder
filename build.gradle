////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    // Project constants
    github_org = 'blacklocus'
    project_group = 'com.blacklocus.logback'
    project_name = 'json-encoder'
    project_version = '0.0.1-SNAPSHOT'
    project_description = 'Log messages output as JSON.'
    project_jdk = '1.7'

    /*
     * Dependencies can be named so that sub-projects can reference consistent version of them.
     * dependencies {
     *     compile deps['guava']
     * }
     */
    deps = [
    ]

    /*
     * Fine tune the POM contents here, particularly, the developers section. Some defaulting behavior is provided
     * for all other fields based on project constants.
     */
    project_pom = {
        name project_name
        description project_description
        url "https://github.com/${github_org}/${project_name}"
        licenses {
            license {
                name 'MIT License'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }
        scm {
            url "https://github.com/${github_org}/${project_name}.git"
            connection "scm:git:https://github.com/${github_org}/${project_name}.git"
            developerConnection "scm:git:git@github.com:${github_org}/${project_name}.git"
        }
        organization {
            name github_org
            url "https://github.com/${github_org}"
        }
        developers {
            developer {
                id 'developer'
                name 'developer'
            }
        }
    }

    /** Function returns a new manifest that can be customized per module */
    defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()
            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    /** Used where gradle task evaluation would fail because of an undefined value, even if the task wasn't targeted. */
    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }

}


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'license'
}

subprojects {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Identifiers

    group = project_group
    version = project_version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Plugins

    apply plugin: 'groovy'
    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'idea'

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // License

    license {
        header rootProject.file('src/license/HEADER')
    }

    assemble {
        dependsOn licenseFormatMain, licenseFormatTest
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Dependencies

    repositories {
        mavenCentral()
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Artifacts

    jar {
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Publishing

    assemble {
        dependsOn licenseFormatMain, licenseFormatTest
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        dependsOn licenseFormatMain, licenseFormatTest
        enabled = false // by default. Mark individual projects back to true for inclusion in publishing.

        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            //# ./gradlew -PdeployUrl=http://server/artifactory/repo -PdeployUser=admin -PdeployPass=pass uploadArchives
            // for snapshots https://oss.sonatype.org/content/repositories/snapshots
            // for staging/release https://oss.sonatype.org/service/local/staging/deploy/maven2
            repository(
                    url: defaultBlank({ deployUrl })
            ) {
                // If these are not defined assemble needlessly fails for unrelated tasks, hence, defaultBlank.
                authentication(userName: defaultBlank({ deployUser }), password: defaultBlank({ deployPass }))
            }

            pom.project project_pom
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Automatics (a.k.a. Ugly-But-Useful stuff)

// Create placeholder if this is a brand new project.
boolean createdLicenseDir = rootProject.file('src/license').mkdirs()
createdLicenseDir && logger.info('Created src/license/')
boolean createdLicensePlaceholder = rootProject.file('src/license/HEADER').createNewFile()
createdLicensePlaceholder && logger.info('Created src/license/HEADER placeholder')

// Create and maintain settings.gradle rootProject.name
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.util.regex.Pattern

def settingsPath = rootProject.file('settings.gradle').toPath()
def settingsRootProjectName = "rootProject.name = '${project_name}'" + System.getProperty("line.separator")
if (settingsPath.toFile().exists()) {
    // Make sure name is in sync with project constants.
    def settings = new String(Files.readAllBytes(settingsPath), StandardCharsets.UTF_8)
    if (!settings.contains(settingsRootProjectName)) {
        def matcher = Pattern.compile('\\s*rootProject\\.name\\s*=\\s*[^\\s]+').matcher(settings)
        if (matcher.find()) {
            def sb = new StringBuffer();
            matcher.appendReplacement(sb, settingsRootProjectName).appendTail(sb)
            settings = sb.toString()
        } else {
            settings = settingsRootProjectName + System.getProperty("line.separator") + settings
        }
        Files.write(settingsPath, settings.getBytes(StandardCharsets.UTF_8))
        logger.info('Updated settings.gradle with current ext.project_name which is ${project_name}')
    }
} else {
    // Create settings.gradle if this is a brand new project. This is also the only way I know of (which is to do it in
    // settings.gradle) to set an explicit name, rather than infer it from the title of the root directory.
    Files.write(settingsPath, settingsRootProjectName.getBytes(StandardCharsets.UTF_8))
    logger.info('Created settings.gradle with ${settingsRootProjectName}')
}

// Touch build.gradle files for all projects. Convenient when adding new modules.
subprojects {
    project.projectDir.mkdirs()
    def projectBuildGradleFile = project.file('build.gradle')
    if (!projectBuildGradleFile.exists()) {
        projectBuildGradleFile.createNewFile()
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-2.3-all.zip'
}

idea {
    module {
        downloadSources = true
    }
    project {
        jdkName = project_jdk
        languageLevel = project_jdk
        vcs = 'Git'
    }
}

