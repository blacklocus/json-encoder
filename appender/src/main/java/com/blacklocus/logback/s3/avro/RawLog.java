/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.blacklocus.logback.s3.avro;  
@SuppressWarnings("all")
/** A single log message with original format string and arguments intact. */
@org.apache.avro.specific.AvroGenerated
public class RawLog extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawLog\",\"namespace\":\"com.blacklocus.logback.s3.avro\",\"doc\":\"A single log message with original format string and arguments intact.\",\"fields\":[{\"name\":\"loggerName\",\"type\":\"string\",\"doc\":\"Name of the logger that logged this message.\"},{\"name\":\"logLevel\",\"type\":{\"type\":\"enum\",\"name\":\"LogLevel\",\"symbols\":[\"TRACE\",\"DEBUG\",\"INFO\",\"WARN\",\"ERROR\"]},\"doc\":\"The log message severity level, one of TRACE, DEBUG, INFO, WARN, ERROR\"},{\"name\":\"logDateTime\",\"type\":\"string\",\"doc\":\"ISO-8601 datetime string when the log message was created.\"},{\"name\":\"lineNumber\",\"type\":[\"null\",\"int\"],\"doc\":\"If enabled, the line number of the logger invocation. This combined with the logger name can uniquely identify logger invocations under typical logging configurations.\",\"default\":null},{\"name\":\"rendered\",\"type\":[\"null\",\"string\"],\"doc\":\"The 'rendered' log message as produced by the underlying encoder, should one have bee specified.\",\"default\":null},{\"name\":\"format\",\"type\":\"string\",\"doc\":\"The log message's original, raw format string.\"},{\"name\":\"args\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"string\"]},\"doc\":\"The log message's original formatter arguments as strings.\"},{\"name\":\"context\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"keys\":\"string\"},\"doc\":\"Any MDC values present at the time of the logger invocation. See http://logback.qos.ch/manual/mdc.html\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Name of the logger that logged this message. */
  @Deprecated public java.lang.CharSequence loggerName;
  /** The log message severity level, one of TRACE, DEBUG, INFO, WARN, ERROR */
  @Deprecated public com.blacklocus.logback.s3.avro.LogLevel logLevel;
  /** ISO-8601 datetime string when the log message was created. */
  @Deprecated public java.lang.CharSequence logDateTime;
  /** If enabled, the line number of the logger invocation. This combined with the logger name can uniquely identify logger invocations under typical logging configurations. */
  @Deprecated public java.lang.Integer lineNumber;
  /** The 'rendered' log message as produced by the underlying encoder, should one have bee specified. */
  @Deprecated public java.lang.CharSequence rendered;
  /** The log message's original, raw format string. */
  @Deprecated public java.lang.CharSequence format;
  /** The log message's original formatter arguments as strings. */
  @Deprecated public java.util.List<java.lang.CharSequence> args;
  /** Any MDC values present at the time of the logger invocation. See http://logback.qos.ch/manual/mdc.html */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RawLog() {}

  /**
   * All-args constructor.
   */
  public RawLog(java.lang.CharSequence loggerName, com.blacklocus.logback.s3.avro.LogLevel logLevel, java.lang.CharSequence logDateTime, java.lang.Integer lineNumber, java.lang.CharSequence rendered, java.lang.CharSequence format, java.util.List<java.lang.CharSequence> args, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context) {
    this.loggerName = loggerName;
    this.logLevel = logLevel;
    this.logDateTime = logDateTime;
    this.lineNumber = lineNumber;
    this.rendered = rendered;
    this.format = format;
    this.args = args;
    this.context = context;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return loggerName;
    case 1: return logLevel;
    case 2: return logDateTime;
    case 3: return lineNumber;
    case 4: return rendered;
    case 5: return format;
    case 6: return args;
    case 7: return context;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: loggerName = (java.lang.CharSequence)value$; break;
    case 1: logLevel = (com.blacklocus.logback.s3.avro.LogLevel)value$; break;
    case 2: logDateTime = (java.lang.CharSequence)value$; break;
    case 3: lineNumber = (java.lang.Integer)value$; break;
    case 4: rendered = (java.lang.CharSequence)value$; break;
    case 5: format = (java.lang.CharSequence)value$; break;
    case 6: args = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: context = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'loggerName' field.
   * Name of the logger that logged this message.   */
  public java.lang.CharSequence getLoggerName() {
    return loggerName;
  }

  /**
   * Sets the value of the 'loggerName' field.
   * Name of the logger that logged this message.   * @param value the value to set.
   */
  public void setLoggerName(java.lang.CharSequence value) {
    this.loggerName = value;
  }

  /**
   * Gets the value of the 'logLevel' field.
   * The log message severity level, one of TRACE, DEBUG, INFO, WARN, ERROR   */
  public com.blacklocus.logback.s3.avro.LogLevel getLogLevel() {
    return logLevel;
  }

  /**
   * Sets the value of the 'logLevel' field.
   * The log message severity level, one of TRACE, DEBUG, INFO, WARN, ERROR   * @param value the value to set.
   */
  public void setLogLevel(com.blacklocus.logback.s3.avro.LogLevel value) {
    this.logLevel = value;
  }

  /**
   * Gets the value of the 'logDateTime' field.
   * ISO-8601 datetime string when the log message was created.   */
  public java.lang.CharSequence getLogDateTime() {
    return logDateTime;
  }

  /**
   * Sets the value of the 'logDateTime' field.
   * ISO-8601 datetime string when the log message was created.   * @param value the value to set.
   */
  public void setLogDateTime(java.lang.CharSequence value) {
    this.logDateTime = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * If enabled, the line number of the logger invocation. This combined with the logger name can uniquely identify logger invocations under typical logging configurations.   */
  public java.lang.Integer getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * If enabled, the line number of the logger invocation. This combined with the logger name can uniquely identify logger invocations under typical logging configurations.   * @param value the value to set.
   */
  public void setLineNumber(java.lang.Integer value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'rendered' field.
   * The 'rendered' log message as produced by the underlying encoder, should one have bee specified.   */
  public java.lang.CharSequence getRendered() {
    return rendered;
  }

  /**
   * Sets the value of the 'rendered' field.
   * The 'rendered' log message as produced by the underlying encoder, should one have bee specified.   * @param value the value to set.
   */
  public void setRendered(java.lang.CharSequence value) {
    this.rendered = value;
  }

  /**
   * Gets the value of the 'format' field.
   * The log message's original, raw format string.   */
  public java.lang.CharSequence getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * The log message's original, raw format string.   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'args' field.
   * The log message's original formatter arguments as strings.   */
  public java.util.List<java.lang.CharSequence> getArgs() {
    return args;
  }

  /**
   * Sets the value of the 'args' field.
   * The log message's original formatter arguments as strings.   * @param value the value to set.
   */
  public void setArgs(java.util.List<java.lang.CharSequence> value) {
    this.args = value;
  }

  /**
   * Gets the value of the 'context' field.
   * Any MDC values present at the time of the logger invocation. See http://logback.qos.ch/manual/mdc.html   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
    return context;
  }

  /**
   * Sets the value of the 'context' field.
   * Any MDC values present at the time of the logger invocation. See http://logback.qos.ch/manual/mdc.html   * @param value the value to set.
   */
  public void setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.context = value;
  }

  /** Creates a new RawLog RecordBuilder */
  public static com.blacklocus.logback.s3.avro.RawLog.Builder newBuilder() {
    return new com.blacklocus.logback.s3.avro.RawLog.Builder();
  }
  
  /** Creates a new RawLog RecordBuilder by copying an existing Builder */
  public static com.blacklocus.logback.s3.avro.RawLog.Builder newBuilder(com.blacklocus.logback.s3.avro.RawLog.Builder other) {
    return new com.blacklocus.logback.s3.avro.RawLog.Builder(other);
  }
  
  /** Creates a new RawLog RecordBuilder by copying an existing RawLog instance */
  public static com.blacklocus.logback.s3.avro.RawLog.Builder newBuilder(com.blacklocus.logback.s3.avro.RawLog other) {
    return new com.blacklocus.logback.s3.avro.RawLog.Builder(other);
  }
  
  /**
   * RecordBuilder for RawLog instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawLog>
    implements org.apache.avro.data.RecordBuilder<RawLog> {

    private java.lang.CharSequence loggerName;
    private com.blacklocus.logback.s3.avro.LogLevel logLevel;
    private java.lang.CharSequence logDateTime;
    private java.lang.Integer lineNumber;
    private java.lang.CharSequence rendered;
    private java.lang.CharSequence format;
    private java.util.List<java.lang.CharSequence> args;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;

    /** Creates a new Builder */
    private Builder() {
      super(com.blacklocus.logback.s3.avro.RawLog.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.blacklocus.logback.s3.avro.RawLog.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.loggerName)) {
        this.loggerName = data().deepCopy(fields()[0].schema(), other.loggerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logLevel)) {
        this.logLevel = data().deepCopy(fields()[1].schema(), other.logLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.logDateTime)) {
        this.logDateTime = data().deepCopy(fields()[2].schema(), other.logDateTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[3].schema(), other.lineNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rendered)) {
        this.rendered = data().deepCopy(fields()[4].schema(), other.rendered);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.format)) {
        this.format = data().deepCopy(fields()[5].schema(), other.format);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.args)) {
        this.args = data().deepCopy(fields()[6].schema(), other.args);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.context)) {
        this.context = data().deepCopy(fields()[7].schema(), other.context);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RawLog instance */
    private Builder(com.blacklocus.logback.s3.avro.RawLog other) {
            super(com.blacklocus.logback.s3.avro.RawLog.SCHEMA$);
      if (isValidValue(fields()[0], other.loggerName)) {
        this.loggerName = data().deepCopy(fields()[0].schema(), other.loggerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logLevel)) {
        this.logLevel = data().deepCopy(fields()[1].schema(), other.logLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.logDateTime)) {
        this.logDateTime = data().deepCopy(fields()[2].schema(), other.logDateTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[3].schema(), other.lineNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rendered)) {
        this.rendered = data().deepCopy(fields()[4].schema(), other.rendered);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.format)) {
        this.format = data().deepCopy(fields()[5].schema(), other.format);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.args)) {
        this.args = data().deepCopy(fields()[6].schema(), other.args);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.context)) {
        this.context = data().deepCopy(fields()[7].schema(), other.context);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'loggerName' field */
    public java.lang.CharSequence getLoggerName() {
      return loggerName;
    }
    
    /** Sets the value of the 'loggerName' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setLoggerName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.loggerName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'loggerName' field has been set */
    public boolean hasLoggerName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'loggerName' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearLoggerName() {
      loggerName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'logLevel' field */
    public com.blacklocus.logback.s3.avro.LogLevel getLogLevel() {
      return logLevel;
    }
    
    /** Sets the value of the 'logLevel' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setLogLevel(com.blacklocus.logback.s3.avro.LogLevel value) {
      validate(fields()[1], value);
      this.logLevel = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'logLevel' field has been set */
    public boolean hasLogLevel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'logLevel' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearLogLevel() {
      logLevel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'logDateTime' field */
    public java.lang.CharSequence getLogDateTime() {
      return logDateTime;
    }
    
    /** Sets the value of the 'logDateTime' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setLogDateTime(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.logDateTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'logDateTime' field has been set */
    public boolean hasLogDateTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'logDateTime' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearLogDateTime() {
      logDateTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'lineNumber' field */
    public java.lang.Integer getLineNumber() {
      return lineNumber;
    }
    
    /** Sets the value of the 'lineNumber' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setLineNumber(java.lang.Integer value) {
      validate(fields()[3], value);
      this.lineNumber = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lineNumber' field has been set */
    public boolean hasLineNumber() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lineNumber' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearLineNumber() {
      lineNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'rendered' field */
    public java.lang.CharSequence getRendered() {
      return rendered;
    }
    
    /** Sets the value of the 'rendered' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setRendered(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.rendered = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'rendered' field has been set */
    public boolean hasRendered() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'rendered' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearRendered() {
      rendered = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'format' field */
    public java.lang.CharSequence getFormat() {
      return format;
    }
    
    /** Sets the value of the 'format' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.format = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'format' field has been set */
    public boolean hasFormat() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'format' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearFormat() {
      format = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'args' field */
    public java.util.List<java.lang.CharSequence> getArgs() {
      return args;
    }
    
    /** Sets the value of the 'args' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setArgs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.args = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'args' field has been set */
    public boolean hasArgs() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'args' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearArgs() {
      args = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'context' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
      return context;
    }
    
    /** Sets the value of the 'context' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.context = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'context' field has been set */
    public boolean hasContext() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'context' field */
    public com.blacklocus.logback.s3.avro.RawLog.Builder clearContext() {
      context = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public RawLog build() {
      try {
        RawLog record = new RawLog();
        record.loggerName = fieldSetFlags()[0] ? this.loggerName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.logLevel = fieldSetFlags()[1] ? this.logLevel : (com.blacklocus.logback.s3.avro.LogLevel) defaultValue(fields()[1]);
        record.logDateTime = fieldSetFlags()[2] ? this.logDateTime : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lineNumber = fieldSetFlags()[3] ? this.lineNumber : (java.lang.Integer) defaultValue(fields()[3]);
        record.rendered = fieldSetFlags()[4] ? this.rendered : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.format = fieldSetFlags()[5] ? this.format : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.args = fieldSetFlags()[6] ? this.args : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.context = fieldSetFlags()[7] ? this.context : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
